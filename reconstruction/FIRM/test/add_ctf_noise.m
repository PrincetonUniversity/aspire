function [ projections,noisy_projections, defocusID, ctfs ] = ...
    add_ctf_noise( projs,SNR,noise_type,ctf_type  )
% add ctfs to the images
% the ctfs are generated by the function CTF under
% /scratch/amits/Ribosome27000and5000x2Hetero/EMBase
% in this simulation, there are 9 different ctfs (defocuses), and the
% images are randomly assigned to a defocus group. 'defocusID' records this
% random assignment.
n=size(projs,1);
n_projs=size(projs,3);
defocusID=[];
ctfs=[];
if strcmp(ctf_type,'ctf')
    defocus=[1.4 1.75 2];
    %     defocus=[2.035 1.4 1.9 1.86 1.875 2 1.58 1.45 1.75];
    % defocus=[1.9 1.86 1.875 2 2.035 1.58 1.4 1.45 1.75];
    alpha=0.07;res=3.36;lambda=0.0251;Cs=2;B=100;
    siz=n+1;
    n_d=length(defocus);
    defocusID=[ones(1,166) 2*ones(1,167) 3*ones(1,167)];
    ctfs=zeros(n,n,n_d);
    %     addpath('/scratch/amits/Ribosome27000and5000x2Hetero/EMBase');
    for k=1:n_d
        ctf=CTF(siz, res, lambda, defocus(k), Cs, B, alpha);
        ctfs(:,:,k)=ctf(1:end-1,1:end-1);
    end
    %defocusID=randi(n_d,[n_projs 1]);
    parfor k=1:n_projs
        p=projs(:,:,k);
        p_fourier=fft2(ifftshift(p));
        p_fourier=fftshift(p_fourier);
        p_fourier=p_fourier.*ctfs(:,:,defocusID(k));
        p=fftshift(ifft2(ifftshift(p_fourier)));
        projs(:,:,k)=p;
    end
end
% Add noise using either generated projections or loaded ones.
projections = real(projs);

% Add noise to projections
p = size(projections, 1);
noisy_projections=zeros(size(projections));

%load color_filter.mat;

%noise_response=ifftshift(S);  %for optimization, so we can use fft2 and
%ifft2 below instead of cfft2 and icfft2
lowidx=-p/2+p+1;
highidx=p/2+p;

parfor k=1:n_projs
    proj=projections(:,:,k);
    sigma=sqrt(var(proj(:))/SNR);
    gn=randn(2*p);
    
    if strcmpi(noise_type,'gaussian')
        cn=gn;
    %else
    %    cn=ifft2(fft2(gn).*noise_response);
    end
    cn=cn(lowidx:highidx,lowidx:highidx);
    cn=cn/std(cn(:));
    cn=cn.*sigma;
    noisy_projections(:,:,k) = proj + cn;
end


end

